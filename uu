//@version=5
strategy("555", overlay=true, default_qty_type=strategy.cash, initial_capital=100, currency=currency.USD)

// 1. SSL Hybrid Indicator =========================================
show_Baseline = input(true, title="Show Baseline")
show_SSL1 = input(false, title="Show SSL1")
show_atr = input(true, title="Show ATR bands")

//ATR
atrlen = input(14, title="ATR Period")
mult_atr = input.float(1.0, title="ATR Multi", step=0.1)
smoothing = input.string("WMA", title="ATR Smoothing", options=["RMA", "SMA", "EMA", "WMA"])

ma_function(source, atrlen) => 
    switch smoothing
        "RMA" => ta.rma(source, atrlen)
        "SMA" => ta.sma(source, atrlen)
        "EMA" => ta.ema(source, atrlen)
        => ta.wma(source, atrlen)

atr_slen = ma_function(ta.tr(true), atrlen)
upper_band = atr_slen * mult_atr + close
lower_band = close - atr_slen * mult_atr

//BASELINE / SSL1 / SSL2 / EXIT MOVING AVERAGE VALUES
maType = input.string("HMA", title="SSL1 / Baseline Type", options=["SMA","EMA","DEMA","TEMA","LSMA","WMA","MF","VAMA","TMA","HMA", "JMA", "Kijun v2", "EDSMA","McGinley"])
len = input(60, title="SSL1 / Baseline Length")

SSL2Type = input.string("JMA", title="SSL2 / Continuation Type", options=["SMA","EMA","DEMA","TEMA","WMA","MF","VAMA","TMA","HMA", "JMA","McGinley"])
len2 = input(5, title="SSL 2 Length")

SSL3Type = input.string("HMA", title="EXIT Type", options=["DEMA","TEMA","LSMA","VAMA","TMA","HMA","JMA", "Kijun v2", "McGinley", "MF"])
len3 = input(15, title="EXIT Length")
src_ssl = input(close, title="Source")

// Moving Average Functions
tema(src, len) =>
    ema1 = ta.ema(src, len)
    ema2 = ta.ema(ema1, len)
    ema3 = ta.ema(ema2, len)
    (3 * ema1) - (3 * ema2) + ema3

kidiv = input.int(1, maxval=4, title="Kijun MOD Divider")
jurik_phase = input.int(3, title="* Jurik (JMA) Only - Phase")
jurik_power = input.int(1, title="* Jurik (JMA) Only - Power")
volatility_lookback = input.int(10, title="* Volatility Adjusted (VAMA) Only - Volatility lookback length")
beta = input.float(0.8, minval=0, maxval=1, step=0.1, title="Modular Filter, General Filter Only - Beta")
feedback = input.bool(false, title="Modular Filter Only - Feedback")
z = input.float(0.5, title="Modular Filter Only - Feedback Weighting", step=0.1, minval=0, maxval=1)
ssfLength = input.int(20, title="EDSMA - Super Smoother Filter Length", minval=1)
ssfPoles = input.string("2", title="EDSMA - Super Smoother Filter Poles", options=["2", "3"])

// EDSMA functions
get2PoleSSF(src, length) =>
    PI = 2 * math.asin(1)
    arg = math.sqrt(2) * PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(arg)
    c2 = b1
    c3 = -math.pow(a1, 2)
    c1 = 1 - c2 - c3
    ssf = 0.0
    ssf := c1 * src + c2 * nz(ssf[1]) + c3 * nz(ssf[2])

get3PoleSSF(src, length) =>
    PI = 2 * math.asin(1)
    arg = PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(1.738 * arg)
    c1 = math.pow(a1, 2)
    coef2 = b1 + c1
    coef3 = -(c1 + b1 * c1)
    coef4 = math.pow(c1, 2)
    coef1 = 1 - coef2 - coef3 - coef4
    ssf = 0.0
    ssf := coef1 * src + coef2 * nz(ssf[1]) + coef3 * nz(ssf[2]) + coef4 * nz(ssf[3])

ma(type, src, len) =>
    float result = 0
    if type=="TMA"
        result := ta.sma(ta.sma(src, math.ceil(len / 2)), math.floor(len / 2) + 1)
    if type=="MF"
        ts = 0.0
        b = 0.0
        c = 0.0
        os = 0.0
        alpha = 2/(len+1)
        a = feedback ? z*src + (1-z)*nz(ts[1], src) : src
        b := a > alpha*a+(1-alpha)*nz(b[1], a) ? a : alpha*a+(1-alpha)*nz(b[1], a)
        c := a < alpha*a+(1-alpha)*nz(c[1], a) ? a : alpha*a+(1-alpha)*nz(c[1], a)
        os := a == b ? 1 : a == c ? 0 : nz(os[1])
        upper = beta*b+(1-beta)*c
        lower = beta*c+(1-beta)*b 
        ts := os*upper+(1-os)*lower
        result := ts
    if type=="LSMA"
        result := ta.linreg(src, len, 0)
    if type=="SMA"
        result := ta.sma(src, len)
    if type=="EMA"
        result := ta.ema(src, len)
    if type=="DEMA"
        e = ta.ema(src, len)
        result := 2 * e - ta.ema(e, len)
    if type=="TEMA"
        e = ta.ema(src, len)
        result := 3 * (e - ta.ema(e, len)) + ta.ema(ta.ema(e, len), len)
    if type=="WMA"
        result := ta.wma(src, len)
    if type=="VAMA"
        mid = ta.ema(src, len)
        dev = src-mid
        vol_up = ta.highest(dev, volatility_lookback)
        vol_down = ta.lowest(dev, volatility_lookback)
        result := mid + (vol_up + vol_down)/2
    if type=="HMA"
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    if type=="JMA"
        phaseRatio = jurik_phase < -100 ? 0.5 : jurik_phase > 100 ? 2.5 : jurik_phase / 100 + 1.5
        beta_j = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
        alpha_j = math.pow(beta_j, jurik_power)
        jma = 0.0
        e0 = 0.0
        e0 := (1 - alpha_j) * src + alpha_j * nz(e0[1])
        e1 = 0.0
        e1 := (src - e0) * (1 - beta_j) + beta_j * nz(e1[1])
        e2 = 0.0
        e2 := (e0 + phaseRatio * e1 - nz(jma[1])) * math.pow(1 - alpha_j, 2) + math.pow(alpha_j, 2) * nz(e2[1])
        jma := e2 + nz(jma[1])
        result := jma
    if type=="Kijun v2"
        kijun = (ta.lowest(len) + ta.highest(len))/2
        conversionLine = (ta.lowest(len/kidiv) + ta.highest(len/kidiv))/2
        delta = (kijun + conversionLine)/2
        result := delta
    if type=="McGinley"
        mg = 0.0
        mg := na(mg[1]) ? ta.ema(src, len) : mg[1] + (src - mg[1]) / (len * math.pow(src/mg[1], 4))
        result := mg
    if type=="EDSMA"
        zeros = src - nz(src[2])
        avgZeros = (zeros + zeros[1]) / 2
        ssf = ssfPoles == "2" ? get2PoleSSF(avgZeros, ssfLength) : get3PoleSSF(avgZeros, ssfLength)
        stdev = ta.stdev(ssf, len)
        scaledFilter = stdev != 0 ? ssf / stdev : 0
        alpha = 5 * math.abs(scaledFilter) / len
        edsma = 0.0
        edsma := alpha * src + (1 - alpha) * nz(edsma[1])
        result := edsma
    result

// SSL Calculations
emaHigh = ma(maType, high, len)
emaLow = ma(maType, low, len)
maHigh = ma(SSL2Type, high, len2)
maLow = ma(SSL2Type, low, len2)
ExitHigh = ma(SSL3Type, high, len3)
ExitLow = ma(SSL3Type, low, len3)

// Keltner Baseline Channel
BBMC = ma(maType, close, len)
useTrueRange = input.bool(true, title="Use True Range")
multy = input.float(0.2, step=0.05, title="Base Channel Multiplier")
Keltma = ma(maType, src_ssl, len)
true_range = useTrueRange ? ta.tr : high - low
rangema = ta.ema(true_range, len)
upperk = Keltma + rangema * multy
lowerk = Keltma - rangema * multy

// SSL1 Values
var int Hlv = na
Hlv := close > emaHigh ? 1 : close < emaLow ? -1 : nz(Hlv[1], 0)
sslDown = Hlv < 0 ? emaHigh : emaLow

// SSL2 Values
var int Hlv2 = na
Hlv2 := close > maHigh ? 1 : close < maLow ? -1 : nz(Hlv2[1], 0)
sslDown2 = Hlv2 < 0 ? maHigh : maLow

// EXIT Values
var int Hlv3 = na
Hlv3 := close > ExitHigh ? 1 : close < ExitLow ? -1 : nz(Hlv3[1], 0)
sslExit = Hlv3 < 0 ? ExitHigh : ExitLow
base_cross_Long = ta.crossover(close, sslExit)
base_cross_Short = ta.crossover(sslExit, close)

// SSL Hybrid Visualization
show_color_bar = input.bool(true, title="Color Bars")
color_bar = close > upperk ? #00c3ff : close < lowerk ? #ff0062 : color.gray
color_ssl1 = close > sslDown ? #00c3ff : close < sslDown ? #ff0062 : na

plot(show_Baseline ? BBMC : na, color=color_bar, linewidth=4, transp=0, title='MA Baseline')
plot(show_SSL1 ? sslDown : na, title="SSL1", linewidth=3, color=color_ssl1, transp=10)
barcolor(show_color_bar ? color_bar : na)
up_channel = plot(show_Baseline ? upperk : na, color=color_bar, title="Baseline Upper Channel")
low_channel = plot(show_Baseline ? lowerk : na, color=color_bar, title="Baseline Lower Channel")
fill(up_channel, low_channel, color=color_bar, transp=90)

// SSL2 Continuation from ATR
atr_crit = input.float(0.9, step=0.1, title="Continuation ATR Criteria")
upper_half = atr_slen * atr_crit + close
lower_half = close - atr_slen * atr_crit
buy_inatr = lower_half < sslDown2
sell_inatr = upper_half > sslDown2
sell_cont = close < BBMC and close < sslDown2
buy_cont = close > BBMC and close > sslDown2
atr_fill = buy_cont and buy_inatr ? color.green : sell_cont and sell_inatr ? color.purple : color.white
plot(sslDown2, title="SSL2", linewidth=2, color=atr_fill, style=plot.style_circles, transp=0)
plot(show_atr ? upper_band : na, "+ATR", color=color.white, transp=80)
plot(show_atr ? lower_band : na, "-ATR", color=color.white, transp=80)

// 2. Original 555 Strategy =========================================
// EMA indicators
ema6 = ta.ema(close, 20)
ema21 = ta.ema(close, 160)
ema55 = ta.ema(close, 240)
ema600 = ta.ema(close, 600)

// Bollinger Bands
length = 8
src_bb = close
mult_bb = 1.5
basis = ta.sma(src_bb, length)
dev = mult_bb * ta.stdev(src_bb, length)
upperBB = basis + dev
lowerBB = basis - dev

// Dynamic channel width
bandWidth = math.abs(ema6 - ema21)
minWidth = ta.sma(bandWidth, 150)
widthRatio = bandWidth / minWidth
validTrade = widthRatio > 0.01 and widthRatio < 0.1

// Bollinger Band width filter
bbWidth = (upperBB - lowerBB) / basis
lowVolatility = bbWidth < 0.01
validTrade := validTrade and not lowVolatility

// Trading signals with SSL Hybrid filter
emaLong = ta.crossover(ema6, ema21) and close > ema55 and validTrade and close > sslDown
emaShort = ta.crossunder(ema6, ema21) and close < ema55 and validTrade and close < sslDown

enterLong = emaLong 
enterShort = emaShort

// Stop loss calculation
longStopPrice = ta.lowest(low, 50)
shortStopPrice = ta.highest(high, 50)

// Risk parameters
leverage = 20
riskPercent = 25
takeProfitPercent = 5.5
trailOffset = input.float(1.0, "追踪止损偏移%", minval=0.1, maxval=5, step=0.1)

// Dynamic position sizing
equity = strategy.equity
riskCapital = equity * riskPercent / 100
positionSize = (riskCapital * leverage) / close

// Take profit calculation
longTakeProfit = close * (1 + takeProfitPercent/100)
shortTakeProfit = close * (1 - takeProfitPercent/100)

// Delayed execution logic
var bool delayedEnterLong = false
var bool delayedEnterShort = false

if enterLong
    delayedEnterLong := true
else if barstate.isconfirmed and delayedEnterLong
    strategy.entry("Long", strategy.long, qty=positionSize)
    strategy.exit("Exit Long", "Long", stop=longStopPrice, limit=longTakeProfit)
    delayedEnterLong := false

if enterShort
    delayedEnterShort := true
else if barstate.isconfirmed and delayedEnterShort
    strategy.entry("Short", strategy.short, qty=positionSize)
    strategy.exit("Exit Short", "Short", stop=shortStopPrice, limit=shortTakeProfit)
    delayedEnterShort := false

// Exit conditions with SSL Hybrid filter
exitLong = ta.crossunder(ema6, ema21)
exitShort = ta.crossover(ema6, ema21)

if exitLong
    strategy.close("Long")
if exitShort
    strategy.close("Short")

// Visualization
plot(ema6, color=color.blue, title="EMA 6")
plot(ema21, color=color.red, title="EMA 21")
plot(ema55, color=color.green, title="EMA 55")
// plot(upperBB, color=color.purple, title="Upper BB")
// plot(lowerBB, color=color.purple, title="Lower BB")

plotshape(enterLong, title="Buy Signal", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)
plotshape(enterShort, title="Sell Signal", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small)